events {

    worker_connections    1024;

}

http {
    server {
        listen 80;
        listen [::]:80;

        server_name i9E105.p.ssafy.io;

        # Allow only for register SSL (Certbot)
        location ~ /.well-known/acme-challenge {
            allow all;
            root /var/www/html;
        }

        # Http로 들어온 요청을 Https로 Redirect
        location / {
            rewrite ^ https://$host$request_uri? permanent;
        }
        
    }

    server {
        listen 443 ssl;
        server_name i9E105.p.ssafy.io;

        ssl_certificate /etc/letsencrypt/live/i9e105.p.ssafy.io/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/i9e105.p.ssafy.io/privkey.pem;

          # /api1로 시작하는 요청은 Spring으로 프록시
         # /api1/something 으로 들어오는 요청을 api1 항목을 제거하고
        location ~ ^/api1/(.*)$ {
            resolver 127.0.0.11 ipv6=off;
            
            #proxy_pass http://spring:8080/$1;
            proxy_pass http://172.30.0.3:8080/$1;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # react 빌드 결과를 nginx 디렉토리 구조안에 넣고 정적인 데이터 반환하는 방법
        # location / {
        #     root   /usr/share/nginx/html;
        #     index  index.html index.htm;
        #     try_files $uri $uri/ /index.html;
        # }
        
        location / {
            proxy_pass http://172.30.0.5:3000/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;  
        }
    }
}
