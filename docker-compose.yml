version: '3.8'

services:
  mysql:
    image: mysql:latest
    container_name: mysql
    environment:
        MYSQL_ROOT_PASSWORD: 7818
        MYSQL_DATABASE: naknak
        MYSQL_USER: root
    ports:
      - "3306:3306"
    networks:
      - spring-redis
    volumes:
      - ./mysql/conf.d:/etc/mysql/conf.d # MySQL 설정 파일 위치
    command:
      - "mysqld"
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"

  mongodb:
    image: mongo
    container_name: mongodb
    prots:
      - "27017:27017"
    networks:
      - spring-redis
    environment:
      MONGO_INITDB_DATABASE: fisher-log
    volumes:
      - mongo_data:/data/db

  spring:
    build:
      context: ./back/Spring/fisher
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    networks:
      - spring-redis
    depends_on:
      - redis
      - mysql
    container_name: spring

  logServer:
    build:
      context: ./back/fisher-log-server
      dockerfile: dockerfile
    ports: 
      - "8081:8081"
    networks:
      - spring-redis
    depends_on:
      - redis
      - mysql
    container_name: logServer

  redis:
    image: "redis:latest"
    command: ["redis-server", "--requirepass", "1747"]
    ports:
      - "6379:6379"
    networks:
      - spring-redis
    container_name: redis

  nginx:
    build:
      context: ./front
      dockerfile: dockerfile
    ports:
      - "443:443"
      - "80:80"
    networks:
      - spring-redis
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    container_name: nginx
    #dns_search: s09p12e105_spring-redis

  react:
    build:
      context: ./front
      dockerfile: dockerfile_test
    ports:
      - "3000:3000"
    networks:
      - spring-redis
    container_name: react

networks:
  spring-redis:
    external: true
      

volumes:
  vol:
